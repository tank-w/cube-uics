{"remainingRequest":"/Users/apple/www/vue/elmapp/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/apple/www/vue/elmapp/node_modules/cube-ui/src/components/recycle-list/recycle-list.vue?vue&type=style&index=0&lang=stylus&rel=stylesheet%2Fstylus&","dependencies":[{"path":"/Users/apple/www/vue/elmapp/node_modules/cube-ui/src/components/recycle-list/recycle-list.vue","mtime":499162500000},{"path":"/Users/apple/www/vue/elmapp/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/www/vue/elmapp/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/apple/www/vue/elmapp/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/apple/www/vue/elmapp/node_modules/stylus-loader/index.js","mtime":1519606876000},{"path":"/Users/apple/www/vue/elmapp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/www/vue/elmapp/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmN1YmUtcmVjeWNsZS1saXN0CiAgcG9zaXRpb246IHJlbGF0aXZlCiAgaGVpZ2h0OiAxMDAlCiAgb3ZlcmZsb3cteDogaGlkZGVuCiAgb3ZlcmZsb3cteTogYXV0bwogIC13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOiB0b3VjaAoKLmN1YmUtcmVjeWNsZS1saXN0LW1haW4KICBtaW4taGVpZ2h0OiAxMDAlCgouY3ViZS1yZWN5Y2xlLWxpc3QtZmFrZQogIGhlaWdodDogMXB4CgouY3ViZS1yZWN5Y2xlLWxpc3QtaW52aXNpYmxlCiAgdG9wOiAtMTAwMHB4CiAgdmlzaWJpbGl0eTogaGlkZGVuCgouY3ViZS1yZWN5Y2xlLWxpc3QtaXRlbQogIHdpZHRoOiAxMDAlCiAgcG9zaXRpb246IGFic29sdXRlCiAgYm94LXNpemluZzogYm9yZGVyLWJveAoKLmN1YmUtcmVjeWNsZS1saXN0LXRyYW5zaXRpb24KICBwb3NpdGlvbjogYWJzb2x1dGUKICBvcGFjaXR5OiAwCiAgdHJhbnNpdGlvbi1wcm9wZXJ0eTogb3BhY2l0eQogIHRyYW5zaXRpb24tZHVyYXRpb246IDUwMG1zCgouY3ViZS1yZWN5Y2xlLWxpc3QtbG9hZGluZwogIG92ZXJmbG93OiBoaWRkZW4KCi5jdWJlLXJlY3ljbGUtbGlzdC1sb2FkaW5nLWNvbnRlbnQKICB0ZXh0LWFsaWduOiBjZW50ZXIKLmN1YmUtcmVjeWNsZS1saXN0LXNwaW5uZXIKICBtYXJnaW46IDEwcHggYXV0bwogIGRpc3BsYXk6IGZsZXgKICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcgo="},{"version":3,"sources":["recycle-list.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoUA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"recycle-list.vue","sourceRoot":"node_modules/cube-ui/src/components/recycle-list","sourcesContent":["<template>\n  <div class=\"cube-recycle-list\">\n    <div class=\"cube-recycle-list-main\">\n      <div class=\"cube-recycle-list-items\" :style=\"{height: heights + 'px'}\">\n        <div\n          v-for=\"item in visibleItems\"\n          class=\"cube-recycle-list-item\"\n          :style=\"{transform: 'translate(0,' + item.top + 'px)'}\"\n        >\n          <div\n            v-if=\"infinite\"\n            :class=\"{'cube-recycle-list-transition': infinite}\"\n            :style=\"{opacity: +!item.loaded}\"\n          >\n            <slot name=\"tombstone\"></slot>\n          </div>\n          <div\n            :class=\"{'cube-recycle-list-transition': infinite}\"\n            :style=\"{opacity: item.loaded}\"\n          >\n            <slot name=\"item\" :data=\"item.data\"></slot>\n          </div>\n        </div>\n\n        <!-- preloads item for get its height, remove it after caculating height-->\n        <div class=\"cube-recycle-list-pool\">\n          <div\n            class=\"cube-recycle-list-item cube-recycle-list-invisible\"\n            v-if=\"item && !item.isTombstone && !item.height\"\n            :ref=\"'preloads'+index\"\n            v-for=\"(item, index) in items\"\n          >\n            <slot name=\"item\" :data=\"item.data\"></slot>\n          </div>\n          <div ref=\"tomb\" class=\"cube-recycle-list-item cube-recycle-list-invisible\">\n            <slot name=\"tombstone\"></slot>\n          </div>\n        </div>\n      </div>\n      <div\n        v-if=\"!infinite && !noMore\"\n        class=\"cube-recycle-list-loading\"\n        :style=\"{visibility: loading ? 'visible' : 'hidden'}\"\n      >\n        <slot name=\"spinner\">\n          <div class=\"cube-recycle-list-loading-content\">\n            <cube-loading class=\"cube-recycle-list-spinner\"></cube-loading>\n          </div>\n        </slot>\n      </div>\n\n      <div v-show=\"noMore\" class=\"cube-recycle-list-noMore\">\n        <slot name=\"noMore\" />\n      </div>\n    </div>\n    <div class=\"cube-recycle-list-fake\"></div>\n  </div>\n</template>\n\n<script>\n  import CubeLoading from '../loading/loading.vue'\n  import { warn } from '../../common/helpers/debug.js'\n  import { isUndef } from '../../common/helpers/util.js'\n\n  const COMPONENT_NAME = 'cube-recycle-list'\n  const PROMISE_ERROR = 'requires a Promise polyfill in this browser.'\n  const EVENT_SCROLL = 'scroll'\n  const EVENT_RESIZE = 'resize'\n\n  export default {\n    name: COMPONENT_NAME,\n    data() {\n      return {\n        items: [],\n        heights: 0,\n        startIndex: 0,\n        loadings: [],\n        noMore: false\n      }\n    },\n    props: {\n      infinite: {\n        type: Boolean,\n        default: false\n      },\n      size: {\n        type: Number,\n        default: 20\n      },\n      offset: {\n        type: Number,\n        default: 100\n      },\n      onFetch: {\n        type: Function,\n        required: true\n      }\n    },\n    computed: {\n      visibleItems() {\n        return this.items.slice(Math.max(0, this.startIndex - this.size), Math.min(this.items.length, this.startIndex + this.size))\n      },\n      tombHeight() {\n        return this.infinite ? this.$refs.tomb && this.$refs.tomb.offsetHeight : 0\n      },\n      loading() {\n        return this.loadings.length\n      }\n    },\n    created() {\n      this.list = []\n      this.promiseStack = []\n    },\n    mounted() {\n      this.checkPromiseCompatibility()\n      this.$el.addEventListener(EVENT_SCROLL, this._onScroll)\n      window.addEventListener(EVENT_RESIZE, this._onResize)\n      this.load()\n    },\n    beforeDestroy() {\n      this.$el.removeEventListener(EVENT_SCROLL, this._onScroll)\n      window.removeEventListener(EVENT_RESIZE, this._onResize)\n    },\n    methods: {\n      checkPromiseCompatibility() {\n        /* istanbul ignore if */\n        if (isUndef(window.Promise)) {\n          warn(PROMISE_ERROR)\n        }\n      },\n      load() {\n        if (this.infinite) {\n          const items = this.items\n          const start = items.length\n          // increase capacity of items to display tombstone\n          items.length += this.size\n          const end = items.length\n          this.loadItems(start, end)\n          this.getItems()\n        } else if (!this.loading) {\n          this.getItems()\n        }\n      },\n      getItems() {\n        const index = this.promiseStack.length\n        const promiseFetch = this.onFetch()\n        this.loadings.push('pending')\n        this.promiseStack.push(promiseFetch)\n        promiseFetch.then((res) => {\n          this.loadings.pop()\n          /* istanbul ignore if */\n          if (!res) {\n            this.stopScroll(index)\n          } else {\n            this.setList(index, res)\n            this.loadItemsByIndex(index)\n            if (res.length < this.size) {\n              this.stopScroll(index)\n            }\n          }\n        })\n      },\n      removeUnusedTombs(copy, index) {\n        let cursor\n        let size = this.size\n        let start = index * size\n        let end = (index + 1) * size\n        for (cursor = start; cursor < end; cursor++) {\n          if (copy[cursor] && copy[cursor].isTombstone) break\n        }\n        this.items = copy.slice(0, cursor)\n      },\n      stopScroll(index) {\n        this.noMore = true\n        this.removeUnusedTombs(this.items.slice(0), index)\n        this.updateItemTop()\n        this.updateStartIndex()\n      },\n      setList(index, res) {\n        const list = this.list\n        const baseIndex = index * this.size\n        for (let i = 0; i < res.length; i++) {\n          list[baseIndex + i] = res[i]\n        }\n      },\n      loadItemsByIndex(index) {\n        const size = this.size\n        const start = index * size\n        const end = (index + 1) * size\n        this.loadItems(start, end)\n      },\n      loadItems(start, end) {\n        const items = this.items\n        let promiseTasks = []\n        let item\n        for (let i = start; i < end; i++) {\n          item = items[i]\n          /* istanbul ignore if */\n          if (item && item.loaded) {\n            continue\n          }\n          this.setItem(i, this.list[i])\n          // get each item's height in nextTick\n          promiseTasks.push(this.$nextTick().then(() => {\n            this.updateItemHeight(i)\n          }))\n        }\n        // update items top and full list height\n        window.Promise.all(promiseTasks).then(() => {\n          this.updateItemTop()\n          this.updateStartIndex()\n        })\n      },\n      setItem(index, data) {\n        this.$set(this.items, index, {\n          data: data || {},\n          height: 0,\n          top: -1000,\n          isTombstone: !data,\n          loaded: data ? 1 : 0\n        })\n      },\n      updateItemHeight(index) {\n        // update item height\n        let cur = this.items[index]\n        let dom = this.$refs['preloads' + index]\n        if (dom && dom[0]) {\n          cur.height = dom[0].offsetHeight\n        } else if (cur) {\n          cur.height = this.tombHeight\n        }\n      },\n      updateItemTop() {\n        let heights = 0\n        const items = this.items\n        let pre\n        let current\n        // loop all items to update item top and list height\n        for (let i = 0; i < items.length; i++) {\n          pre = items[i - 1]\n          current = items[i]\n          // it is empty in array\n          /* istanbul ignore if */\n          if (!items[i]) {\n            heights += 0\n          } else {\n            current.top = pre ? pre.top + pre.height : 0\n            heights += current.height\n          }\n        }\n        this.heights = heights\n      },\n      updateStartIndex() {\n        // update visible items start index\n        let top = this.$el.scrollTop\n        let item\n        const items = this.items\n        for (let i = 0; i < items.length; i++) {\n          item = items[i]\n          if (!item || item.top > top) {\n            this.startIndex = Math.max(0, i - 1)\n            break\n          }\n        }\n      },\n      reset () {\n        const map = [\n          {\n            key: 'items',\n            value: []\n          },\n          {\n            key: 'heights',\n            value: 0\n          },\n          {\n            key: 'startIndex',\n            value: 0\n          },\n          {\n            key: 'loadings',\n            value: []\n          },\n          {\n            key: 'noMore',\n            value: false\n          },\n          {\n            key: 'list',\n            value: []\n          },\n          {\n            key: 'promiseStack',\n            value: []\n          }\n        ]\n        map.forEach(({ key, value }) => {\n          this[key] = value\n        })\n        this.$el.scrollTop = 0\n        this.load()\n      },\n      _onScroll() {\n        // trigger load\n        if (!this.noMore && this.$el.scrollTop + this.$el.offsetHeight > this.heights - this.offset) {\n          this.load()\n        }\n        this.updateStartIndex()\n      },\n      _onResize() {\n        const items = this.items\n        items.forEach((item) => {\n          item.loaded = false\n        })\n        this.loadItems(0, items.length)\n      }\n    },\n    components: {\n      CubeLoading\n    }\n  }\n</script>\n\n<style lang=\"stylus\" rel=\"stylesheet/stylus\">\n  .cube-recycle-list\n    position: relative\n    height: 100%\n    overflow-x: hidden\n    overflow-y: auto\n    -webkit-overflow-scrolling: touch\n\n  .cube-recycle-list-main\n    min-height: 100%\n\n  .cube-recycle-list-fake\n    height: 1px\n\n  .cube-recycle-list-invisible\n    top: -1000px\n    visibility: hidden\n\n  .cube-recycle-list-item\n    width: 100%\n    position: absolute\n    box-sizing: border-box\n\n  .cube-recycle-list-transition\n    position: absolute\n    opacity: 0\n    transition-property: opacity\n    transition-duration: 500ms\n\n  .cube-recycle-list-loading\n    overflow: hidden\n\n  .cube-recycle-list-loading-content\n    text-align: center\n  .cube-recycle-list-spinner\n    margin: 10px auto\n    display: flex\n    justify-content: center\n</style>\n"]}]}